// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package sqlc

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category(name)
    VALUES (?)
RETURNING
    name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	err := row.Scan(&name)
	return name, err
}

const listCategories = `-- name: ListCategories :many
SELECT
    name
FROM
    category
WHERE (name = ?2
    OR name LIKE '%' || ?2 || '%'
    OR ?2 IS NULL)
ORDER BY
    name
LIMIT ?1
`

type ListCategoriesParams struct {
	Limit int64
	Name  *string
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.Limit, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
